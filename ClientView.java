/**
File name: ClientView.java
Author: Jacob Jewell, 0408667244
Course: CST8221 – JAP, Lab Section: 302
Assignment: 2
Date: April 20 2018
Professor:  Svillen Ranev
Purpose: This part of the assignment implements the event handling part the client GUI application.
Class list: ClientView, Controller
 */
import java.awt.Component;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;

/**
The class ClientView is responsible for building the client GUI.
@author Jacob Jewell
@version 2.0
@see default
@since the version number (1.8.0_161)
 */
public class ClientView extends JPanel {
	
	private JButton connect; /** A button to connect to the server */
	private JButton send; /** A button to send commands to the server */
	private JComboBox <String> portOption; /** An array used for the combo box listing */
	private JTextField hostField; /** A text field to enter a host to send to the server */
	private JTextField requestField; /** A text field to enter a command to send to the server */
	private JTextArea displayField; /** A display area to display the messages of the server */
	private JScrollPane scroll; /** A scroll pane if there are too many messages for the display area */
	
	private static final long serialVersionUID = 1L;/** @value serial version UID generated by eclipse */
	private final String portList[] = { "", "8088", "65000", "65535" };/** @value Array used to create content in the combo box */

	private Socket serverSocket = null; /** socket used to connect to the server */
	private ObjectOutputStream output; /** To write primitive data types and graphs of Java objects to an OutputStream */
	private ObjectInputStream input; /** To adeserializes primitive data and objects previously written using an ObjectOutputStream. */

	/**
  	The GUI is built inside a constructor with no-parameters (the default constructor).
	 */
	public ClientView() {

		JPanel connectionArea = new JPanel();
		connectionArea.setLayout(new BorderLayout());
		connectionArea.setBorder(BorderFactory.createTitledBorder( BorderFactory.createLineBorder(Color.red, 10), "CONNECTION")); // The CONNECTION panel must have a red titled round line border.

		JPanel connectionBorder = new JPanel();
		connectionBorder.setBorder(new EmptyBorder(-1, -5, 0, 0));

		JPanel clientArea = new JPanel();
		clientArea.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLACK, 10), "CLIENT REQUEST")); // The CLIENT REQUEST panel must have a blue titled line border
		clientArea.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0));

		JPanel clientBorder = new JPanel();
		clientBorder.setBorder(new EmptyBorder(0, -5, 2, 0));

		JPanel displayArea = new JPanel();	
		displayArea.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.BLUE, 10), "DISPLAY", TitledBorder.CENTER, TitledBorder.DEFAULT_POSITION)); // The DISPLAY panel must have a black titled round line border with centered title.
		displayArea.setLayout(new BorderLayout());

		JPanel topConnectionArea = new JPanel();
		topConnectionArea.setLayout(new GridBagLayout());
		topConnectionArea.setBorder(new EmptyBorder(0, 0, 0, 5));

		JPanel bottomPanel = new JPanel();
		bottomPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 0)); // Flow layout, since it doesn't need to resize with the frame

		JPanel topArea = new JPanel();
		topArea.setLayout(new BorderLayout());
		topArea.add(connectionArea, BorderLayout.NORTH);

		hostField = new JTextField("localhost");
		hostField.setBackground(Color.WHITE); // The Text fields must have white backgrounds
		hostField.setEditable(true); // must be editable.
		hostField.setMargin(new Insets(0, 5, 0, 0)); 
		hostField.setCaretPosition(0); // (The insertion caret (cursor) must be blinking at the beginning of the text field
		hostField.requestFocusInWindow(); // At launch the host text field must has the focus

		JLabel hostLabel = new JLabel();
		hostLabel.setText("Host:");
		hostLabel.setPreferredSize(new Dimension(40, 25));	// The preferred size of the Host: label is 40,25
		hostLabel.setDisplayedMnemonic('H'); // The labels must have mnemonic
		hostLabel.setLabelFor(hostField); // The focus must be transferred to the corresponding test field.


		GridBagConstraints gridBag = new GridBagConstraints();
		gridBag.gridx = 0; // The leftmost column has address gridx = 0
		gridBag.insets = new Insets(0, 5, 0, 0); // Specifies the external padding of the component
		topConnectionArea.add(hostLabel, gridBag); // Add the host label at the correct position

		gridBag.fill = GridBagConstraints.HORIZONTAL; // (make the component wide enough to fill its display area horizontally, but do not change its height)
		gridBag.weightx = 1; // prevent all the components clump together in the center
		gridBag.gridx = GridBagConstraints.RELATIVE; // Use GridBagConstraints.RELATIVE (the default value) to specify that the component be placed just to the right of (for gridx)
		topConnectionArea.add(hostField, gridBag); // Add the host text field at the correct position


		portOption = new JComboBox<String>(portList);
		portOption.setPreferredSize(new Dimension(100, 25)); // The combo box and the Connect button have visually the same size.
		portOption.setBackground(Color.WHITE); // Combo box must have white backgrounds
		portOption.setEditable(true); // must be editable.

		JLabel portLabel = new JLabel();
		portLabel.setText("Port:");
		portLabel.setPreferredSize(new Dimension(40, 25));	// The preferred size of the port: label is 40,25
		portLabel.setDisplayedMnemonic('P'); // The labels must have mnemonic
		portLabel.setLabelFor(portOption); // The focus must be transferred to the corresponding test combo box.

		connect = new JButton();
		connect.setBackground(Color.RED);
		connect.setMnemonic('C'); // All buttons must have mnemonic.
		connect.setText("Connect");
		connect.setPreferredSize(new Dimension(100, 25)); // The combo box and the Connect button have visually the same size.
		connect.addActionListener(new Controller());
		connect.setActionCommand("connect");


		bottomPanel.add(portLabel);
		bottomPanel.add(portOption);
		bottomPanel.add(connect);

		connectionBorder.add(bottomPanel);
		connectionArea.add(topConnectionArea, BorderLayout.NORTH);
		connectionArea.add(connectionBorder, BorderLayout.WEST);


		requestField = new JTextField("Type server request command");
		requestField.setEditable(true); // must be editable.
		requestField.setBackground(Color.WHITE); // The Text fields must have white backgrounds
		requestField.setPreferredSize(new Dimension(427, 20)); 

		send = new JButton();
		send.setMnemonic('S'); // All buttons must have mnemonic.
		send.setText("Send"); // The text area must display the specified text at launch.
		send.setEnabled(false); // The Send button must be disabled at launch
		send.setPreferredSize(new Dimension(100, 20)); // must have the same height as the adjacent text area.
		send.addActionListener(new Controller());
		send.setActionCommand("send");

		clientBorder.add(requestField);
		clientBorder.add(send);
		clientArea.add(clientBorder);// Add the send button at the correct position
		topArea.add(clientArea, BorderLayout.SOUTH);

		displayField = new JTextArea();
		displayField.setEditable(true); // The DISPLAY text area must not be editable.
		displayField.setAlignmentX(Component.LEFT_ALIGNMENT);
		displayField.setRows(16);
		displayField.setColumns(40);
		displayField.setMargin(new Insets(5, 5, 5, 5)); 

		scroll = new JScrollPane();
		scroll.setViewportView(displayField);
		scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);		

		displayArea.add(scroll, BorderLayout.CENTER);

		setLayout(new BorderLayout());
		setBorder(BorderFactory.createEmptyBorder(5, 3, 5, 3));
		add(topArea, BorderLayout.NORTH);
		add(displayArea, BorderLayout.CENTER); 
	}

	/**
	This method is responsible for handling all the events generated by the GUI.
	@author Jacob Jewell
	@version 1.0
	@see default package
	@since the version number (1.8.0_161)
	 */
	private class Controller implements ActionListener {
		public void actionPerformed(ActionEvent event) {
			String requestStr, command = event.getActionCommand();
			int portNumber;

			// When the user clicks the Connect button
			if (command.equals("connect")){
				if(!portOption.getSelectedItem().toString().matches("([0-9]*)")) {	
					displayField.setText("CLIENT>ERROR: Connection refused: server is not available. Check port or restart server.\n");
					return;
				}
				else 
					if(portOption.getSelectedItem().toString().isEmpty()) 
						portNumber = 65535;
					
					else
					// Should use getSelectedItem() to get the port number from the combo box.
					portNumber = Integer.parseInt((String) portOption.getSelectedItem());
				
				if (!hostField.getText().toString().equals("localhost")) { 
					displayField.setText("CLIENT>ERROR: Unknown Host.");
					return;
				}// End of if statement
				try{
					serverSocket = new Socket();
					// The client should try to connect to the server using the specified host and port number
					InetSocketAddress address = new InetSocketAddress( hostField.getText().toString() , portNumber );
					serverSocket.connect(address, 10000);
					// If the connection is successful, input and output streams should be open
					output = new ObjectOutputStream(serverSocket.getOutputStream());
					input = new ObjectInputStream(serverSocket.getInputStream());		

					// To avoid making your GUI irresponsive a timeout socket connection and I/O must be used
				}catch (SocketTimeoutException exception) {
					displayField.setText("CLIENT>ERROR: Connection refused: server is not available. Check port or restart server.\n");
					return;
				}// End of catch statement
				catch(IOException e){
					displayField.setText("CLIENT>ERROR: Connection refused: server is not available. Check port or restart server.\n");
					return;
				}// End of catch statement

				// The Connect button should be disabled and changed to blue in color
				connect.setEnabled(false);
				connect.setBackground(Color.BLUE);

				// The Send button should be enabled
				send.setEnabled(true);

				displayField.setText("Connected to " + serverSocket + "\n");	
			}// End of if statement 

			// When the user types a command line string and clicks the Send button
			else if (command.equals("send")){
				requestStr = requestField.getText();
				try {
					// The command line string must be sent to the server
					output.writeObject(requestStr);
				} catch (IOException ex) {
					displayField.append("SERVER>ERROR: an unexpected error has occured\n");
				}// End of catch statement
				try {
					requestStr = (String) input.readObject();
					if (requestStr.equals("CLD:")) { 
						displayField.setText("");
						return;
					} // End of if statement

					// When the connection session is terminated
					else if (requestStr.equals("SERVER>Connection Closed.")) { 
						output.close();
						input.close();
						serverSocket.close();
						displayField.append(requestStr);
						displayField.append("\nCLIENT>Connection Closed.\n");

						// the Connect button should be	enabled
						connect.setEnabled(true);
						connect.setBackground(Color.RED);

						// the Send button should be disabled.
						send.setEnabled(false);
						return;
					}// End of else if statement
					// If other command, displays response
					displayField.append(requestStr + "\n");

				} catch (ClassNotFoundException | IOException ex) {
					displayField.append("SERVER>ERROR: an unexpected error has occured\n");
				}// End of catch statement
			}// End of else if statement
		} // End of method
	}// End of inner class
} // End of class